{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Calculator","property","state","calculator_template","calculator_text","temp_caltext","temp_number_group","temp_operator_group","handleChange","bind","handleClear","handleResult","Number","operators","event","name","target","getAttribute","calculator_length","this","length","includes","alert","charAt","setState","x","i","operations","number","parseInt","push","number2","pop","number1","operation","some_operation","toString","num1","num2","op","Math","abs","chara","type","class","onClick","react","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2QAIMA,E,kDACJ,WAAYC,GAAW,IAAD,8BACpB,cAAMA,IACDC,MAAQ,CACXC,oBAAqB,EACrBC,gBAAiB,IAEnB,EAAKC,aAAe,GACpB,EAAKC,kBAAoB,CAAC,MAC1B,EAAKC,oBAAsB,CAAC,MAC5B,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBACnB,EAAKE,aAAe,EAAKA,aAAaF,KAAlB,gBACpB,EAAKG,OAAS,EAAKA,OAAOH,KAAZ,gBACd,EAAKI,UAAY,CAAC,IAAK,IAAK,IAAK,KAbb,E,gDAgBtB,SAAaC,GACX,IAAIC,EAAOD,EAAME,OAAOC,aAAa,QACjCC,EAAoBC,KAAKjB,MAAME,gBAAgBgB,OAG/CD,KAAKN,UAAUQ,SAASN,IAA+B,IAAtBG,EACnCI,MAAM,+BAKNH,KAAKN,UAAUQ,SACbF,KAAKjB,MAAME,gBAAgBmB,OAAOL,EAAoB,KAExDC,KAAKN,UAAUQ,SAASN,GAExBO,MAAM,sCAENH,KAAKd,cAAgBU,EACrBI,KAAKK,SAAS,CAAEpB,gBAAiBe,KAAKd,kB,yBAI1C,WACEc,KAAKK,SAAS,CAAEpB,gBAAiB,KACjCe,KAAKd,aAAe,K,0BAGtB,WAEE,IADA,IAAIoB,EAAI,EACCC,EAAI,EAAGA,EAAIP,KAAKd,aAAae,OAAQM,IACxCP,KAAKN,UAAUQ,SAASF,KAAKd,aAAakB,OAAOG,MACnDD,GAAK,GAIT,GAAU,IAANA,EAKJ,GAAIA,GAAK,EACPH,MAAM,wDADR,CAOA,IAFA,IAAIK,EAAaR,KAAKd,aAClBuB,EAAS,GACJF,EAAI,EAAGA,EAAIC,EAAWP,OAAQM,IAEjCP,KAAKN,UAAUQ,SAASM,EAAWJ,OAAOG,KAC5CE,EAASC,SAASD,GAClBT,KAAKb,kBAAkBwB,KAAKF,GAC5BT,KAAKZ,oBAAoBuB,KAAKH,EAAWJ,OAAOG,IAChDE,EAAS,IAETA,GAAUD,EAAWJ,OAAOG,GAIhCP,KAAKb,kBAAkBwB,KAAKD,SAASD,IACrC,IAAIG,EAAUZ,KAAKb,kBAAkB0B,MACjCC,EAAUd,KAAKb,kBAAkB0B,MACjCE,EAAYf,KAAKZ,oBAAoByB,MACzCJ,EAAST,KAAKgB,eAAeF,EAASF,EAASG,GAC/Cf,KAAKd,aAAeuB,EAAOQ,WAC3BjB,KAAKK,SAAS,CAAEpB,gBAAiBe,KAAKd,oBA7BpCiB,MAAM,mE,4BAgCV,SAAee,EAAMC,EAAMC,GACzB,MAAW,MAAPA,EACKF,EAAOC,EAEL,MAAPC,GACEF,EAAOC,EAAO,GAChBhB,MACE,mFAGGkB,KAAKC,IAAIJ,EAAOC,IAEd,MAAPC,EACKF,EAAOC,EAEL,MAAPC,EACKF,EAAOC,OADhB,I,oBAKF,SAAOI,GAA2B,IAApBC,EAAmB,uDAAZ,WAyBnB,MAtBa,QAATA,EAEA,qBACEC,MAAM,qCACNC,QAAS1B,KAAKX,aACdO,KAAM2B,EAHR,SAKGA,IAMH,qBACEE,MAAM,wCACNC,QAAS1B,KAAKX,aACdO,KAAM2B,EAHR,SAKGA,M,oBAOT,WACE,OACE,sBAAKE,MAAM,oCAAX,UACE,qBAAKA,MAAM,8CAAX,SACE,6BAAKzB,KAAKjB,MAAME,oBAElB,sBAAKwC,MAAM,8BAAX,UACGzB,KAAKP,OAAO,EAAG,OACfO,KAAKP,OAAO,EAAG,OACfO,KAAKP,OAAO,EAAG,OACfO,KAAKP,OAAO,QAEf,sBAAKgC,MAAM,+BAAX,UACGzB,KAAKP,OAAO,EAAG,OACfO,KAAKP,OAAO,EAAG,OACfO,KAAKP,OAAO,EAAG,OACfO,KAAKP,OAAO,QAEf,sBAAKgC,MAAM,8BAAX,UACGzB,KAAKP,OAAO,EAAG,OACfO,KAAKP,OAAO,EAAG,OACfO,KAAKP,OAAO,EAAG,OACfO,KAAKP,OAAO,QAEf,sBAAKgC,MAAM,8BAAX,UACGzB,KAAKP,OAAO,EAAG,OAChB,qBACEgC,MAAM,uCACNC,QAAS1B,KAAKT,YAFhB,eAMA,qBACEkC,MAAM,wCACNC,QAAS1B,KAAKR,aACdI,KAAK,IAHP,eAOCI,KAAKP,OAAO,e,GA7KEkC,IAAMC,WAwLhBC,MAJf,WACE,OAAO,cAAC,EAAD,KC7KMC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.dda0d8f9.chunk.js","sourcesContent":["import react from \"react\";\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\nclass Calculator extends react.Component {\n  constructor(property) {\n    super(property);\n    this.state = {\n      calculator_template: 0,\n      calculator_text: \"\",\n    };\n    this.temp_caltext = \"\";\n    this.temp_number_group = [null];\n    this.temp_operator_group = [null];\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClear = this.handleClear.bind(this);\n    this.handleResult = this.handleResult.bind(this);\n    this.Number = this.Number.bind(this);\n    this.operators = [\"+\", \"-\", \"x\", \":\"];\n  }\n\n  handleChange(event) {\n    let name = event.target.getAttribute(\"name\");\n    let calculator_length = this.state.calculator_text.length;\n\n    // Check if the operators was in front\n    if (this.operators.includes(name) && calculator_length === 0) {\n      alert(\"Don't input operator early!\");\n      return;\n    }\n\n    if (\n      this.operators.includes(\n        this.state.calculator_text.charAt(calculator_length - 1)\n      ) &&\n      this.operators.includes(name)\n    ) {\n      alert(\"After operator don't use operator\");\n    } else {\n      this.temp_caltext += name;\n      this.setState({ calculator_text: this.temp_caltext });\n    }\n  }\n\n  handleClear() {\n    this.setState({ calculator_text: \"\" });\n    this.temp_caltext = \"\";\n  }\n\n  handleResult() {\n    let x = 0;\n    for (let i = 0; i < this.temp_caltext.length; i++) {\n      if (this.operators.includes(this.temp_caltext.charAt(i))) {\n        x += 1;\n      }\n    }\n\n    if (x === 0) {\n      alert(\"Well, i hope you don't use '=' if it doesn't has any operator\");\n      return;\n    }\n\n    if (x >= 2) {\n      alert(\"I'm apologize, i just can operate one operation.\");\n      return;\n    }\n\n    let operations = this.temp_caltext;\n    let number = \"\";\n    for (let i = 0; i < operations.length; i++) {\n      // console.log(operations.charAt(i));\n      if (this.operators.includes(operations.charAt(i))) {\n        number = parseInt(number);\n        this.temp_number_group.push(number);\n        this.temp_operator_group.push(operations.charAt(i));\n        number = \"\";\n      } else {\n        number += operations.charAt(i);\n      }\n    }\n\n    this.temp_number_group.push(parseInt(number)); //Menampung bilangan dalam bentuk integer ke array\n    let number2 = this.temp_number_group.pop(); //Memberikan nilai bilangan terakhir\n    let number1 = this.temp_number_group.pop(); //Memberikan nilai bilangan terakhir kedua\n    let operation = this.temp_operator_group.pop(); //Memberikan operator terakhir\n    number = this.some_operation(number1, number2, operation); // Melakukan operasi\n    this.temp_caltext = number.toString();\n    this.setState({ calculator_text: this.temp_caltext });\n  }\n\n  some_operation(num1, num2, op) {\n    if (op === \"+\") {\n      return num1 + num2;\n    }\n    if (op === \"-\") {\n      if (num1 - num2 < 0) {\n        alert(\n          \"I'm sorry, i can't operate it if the number is below zero. So, i'll absolue it.\"\n        );\n      }\n      return Math.abs(num1 - num2);\n    }\n    if (op === \"x\") {\n      return num1 * num2;\n    }\n    if (op === \":\") {\n      return num1 / num2;\n    }\n  }\n\n  Number(chara, type = \"operator\") {\n    let x;\n    //* Jika itu merupakan angka\n    if (type === \"num\") {\n      x = (\n        <div\n          class=\"col text-white text-center bg-dark\"\n          onClick={this.handleChange}\n          name={chara}\n        >\n          {chara}\n        </div>\n      );\n    } else {\n      //* Jika itu merupakan operator\n      x = (\n        <div\n          class=\"col text-white text-center bg-primary\"\n          onClick={this.handleChange}\n          name={chara}\n        >\n          {chara}\n        </div>\n      );\n    }\n    return x;\n  }\n\n  render() {\n    return (\n      <div class=\"container d-grid gap-3 text-white\">\n        <div class=\"result visible bg-white text-dark text-end \">\n          <h3>{this.state.calculator_text}</h3>\n        </div>\n        <div class=\"row justify-content-between\">\n          {this.Number(1, \"num\")}\n          {this.Number(2, \"num\")}\n          {this.Number(3, \"num\")}\n          {this.Number(\"+\")}\n        </div>\n        <div class=\"row  justify-content-between\">\n          {this.Number(4, \"num\")}\n          {this.Number(5, \"num\")}\n          {this.Number(6, \"num\")}\n          {this.Number(\"-\")}\n        </div>\n        <div class=\"row justify-content-between\">\n          {this.Number(7, \"num\")}\n          {this.Number(8, \"num\")}\n          {this.Number(9, \"num\")}\n          {this.Number(\"x\")}\n        </div>\n        <div class=\"row justify-content-between\">\n          {this.Number(0, \"num\")}\n          <div\n            class=\"col bg-danger text-white text-center\"\n            onClick={this.handleClear}\n          >\n            C\n          </div>\n          <div\n            class=\"col bg-primary text-white text-center\"\n            onClick={this.handleResult}\n            name=\"=\"\n          >\n            =\n          </div>\n          {this.Number(\":\")}\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction App() {\n  return <Calculator />;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}